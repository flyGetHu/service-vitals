name: Create Release and Build Binaries

on:
  # 仅当在 GitHub 上创建新的 Release 时触发
  release:
    types: [published] # 也可以用 [created]，但 published 更常用

env:
  # 定义你的二进制文件名 (请替换成你自己的)
  BINARY_NAME: service-vitals

jobs:
  build-release:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # 定义构建矩阵，只包含 linux
        # 注意：Linux 构建使用的是 ubuntu-latest
        os: [ubuntu-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build for release
        run: cargo build --verbose --release

      # --- 准备上传的文件 ---
      - name: Prepare artifact for Linux
        if: matrix.os == 'ubuntu-latest'
        # 在 Linux 上，我们同样重命名，并确保文件有可执行权限
        run: |
          mv target/release/${{ env.BINARY_NAME }} target/release/${{ env.BINARY_NAME }}-linux-amd64
          chmod +x target/release/${{ env.BINARY_NAME }}-linux-amd64

      # --- 上传到 Release ---
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          # 使用 GITHUB_TOKEN 进行认证
          token: ${{ secrets.GITHUB_TOKEN }}
          # 获取触发工作流的 Release 的上传 URL
          upload_url: ${{ github.event.release.upload_url }}
          # Linux 文件路径
          asset_path: target/release/${{ env.BINARY_NAME }}-linux-amd64
          # 上传后在 Release 页面显示的文件名
          asset_name: ${{ env.BINARY_NAME }}-linux-amd64
          asset_content_type: application/octet-stream
