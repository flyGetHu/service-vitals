---
alwaysApply: true
---

# Rust 项目结构规划规范

## 目录结构推荐
- `src/`：主源代码目录，所有业务代码、模块、入口均放于此。
  - `main.rs`：应用程序入口（如为二进制项目）。
  - `lib.rs`：库入口（如为库项目）。
  - `config/`：配置相关模块（如配置解析、类型定义）。
  - `health/`：健康检查、调度、结果等相关模块。
  - `notification/`：通知/告警相关实现。
  - `error.rs`：统一错误类型与处理。
  - `utils/`：通用工具函数、辅助模块。
- `tests/`：集成测试目录，测试用例与主代码解耦。
- `benches/`：基准测试目录。
- `examples/`：示例代码目录。
- `Cargo.toml`：项目元数据与依赖声明。
- `README.md`：项目说明文档。

## 分层与模块化原则
- 每个功能域单独成模块，避免巨型文件。
- 公共类型、trait、错误定义应单独抽离。
- 业务逻辑与配置、错误、通知等解耦。
- 测试代码与主代码分离，优先放在`tests/`目录。

## 命名建议
- 目录、文件、模块均用`snake_case`。
- 类型、结构体、枚举用`PascalCase`。
- trait、接口用`PascalCase`，并加文档注释。
- 常量用`SCREAMING_SNAKE_CASE`。

## 其他建议
- 避免循环依赖，保持依赖方向清晰。
- 每个模块应有简要文档注释，说明用途。
- 目录结构应随项目演进适度调整，保持清晰可维护。
# Rust 项目结构规划规范

## 目录结构推荐
- `src/`：主源代码目录，所有业务代码、模块、入口均放于此。
  - `main.rs`：应用程序入口（如为二进制项目）。
  - `lib.rs`：库入口（如为库项目）。
  - `config/`：配置相关模块（如配置解析、类型定义）。
  - `health/`：健康检查、调度、结果等相关模块。
  - `notification/`：通知/告警相关实现。
  - `error.rs`：统一错误类型与处理。
  - `utils/`：通用工具函数、辅助模块。
- `tests/`：集成测试目录，测试用例与主代码解耦。
- `benches/`：基准测试目录。
- `examples/`：示例代码目录。
- `Cargo.toml`：项目元数据与依赖声明。
- `README.md`：项目说明文档。

## 分层与模块化原则
- 每个功能域单独成模块，避免巨型文件。
- 公共类型、trait、错误定义应单独抽离。
- 业务逻辑与配置、错误、通知等解耦。
- 测试代码与主代码分离，优先放在`tests/`目录。

## 命名建议
- 目录、文件、模块均用`snake_case`。
- 类型、结构体、枚举用`PascalCase`。
- trait、接口用`PascalCase`，并加文档注释。
- 常量用`SCREAMING_SNAKE_CASE`。

## 其他建议
- 避免循环依赖，保持依赖方向清晰。
- 每个模块应有简要文档注释，说明用途。
- 目录结构应随项目演进适度调整，保持清晰可维护。
